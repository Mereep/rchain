var searchIndex = JSON.parse('{\
"rchain_v1":{"doc":"","i":[[5,"main","rchain_v1","",null,[[]]],[0,"rchain","","",null,null],[3,"Blockchain","rchain_v1::rchain","The actual Blockchain container",null,null],[12,"blocks","","Stores all the blocks which are accepted already within…",0,null],[12,"accounts","","Lookup from AccountID (will be a public key later) to…",0,null],[12,"pending_transactions","","Will store transactions which should be added to the chain…",0,null],[3,"Block","","One single part of the blockchain. Basically contains a…",null,null],[12,"transactions","","Actions that this block includes There has to be at least…",1,null],[12,"prev_hash","","This actually connects the blocks together",1,null],[12,"hash","","We store the hash of the block here also in order to save…",1,null],[12,"nonce","","Some arbitrary number which will be later used for Proof…",1,null],[3,"Transaction","","Stores a request to the blockchain",null,null],[12,"nonce","","Unique number (will be used for randomization later;…",2,null],[12,"from","","Account ID",2,null],[12,"created_at","","Stores the time the transaction was created",2,null],[12,"record","","the type of the transaction and its additional information",2,null],[12,"signature","","Signature of the hash of the whole message",2,null],[3,"Account","","Represents an account on the blockchain This is basically…",null,null],[12,"store","","We want the account to be able to store any information we…",3,null],[12,"acc_type","","store if this is a user account or sth else",3,null],[12,"tokens","","Amount of tokens that account owns (like BTC or ETH)",3,null],[4,"TransactionData","","A single operation to be stored on the chain Noticeable,…",null,null],[13,"CreateUserAccount","","Will be used to store a new user account",4,null],[13,"ChangeStoreValue","","Will be used to change or create a arbitrary value into an…",4,null],[12,"key","rchain_v1::rchain::TransactionData","",5,null],[12,"value","","",5,null],[13,"TransferTokens","rchain_v1::rchain","Will be used to move tokens from one owner to another",4,null],[12,"to","rchain_v1::rchain::TransactionData","",6,null],[12,"amount","","",6,null],[13,"CreateTokens","rchain_v1::rchain","Just create tokens out of nowhere",4,null],[12,"receiver","rchain_v1::rchain::TransactionData","",7,null],[12,"amount","","",7,null],[4,"AccountType","rchain_v1::rchain","We can support different types of accounts which could be…",null,null],[13,"User","","A common user account",8,null],[13,"Contract","","An account that technically does not represent an…",8,null],[13,"Validator","","Add whatever roles you need. Again, we will NOT make use…",8,null],[12,"correctly_validated_blocks","rchain_v1::rchain::AccountType","",9,null],[12,"incorrectly_validated_blocks","","",9,null],[12,"you_get_the_idea","","",9,null],[5,"byte_vector_to_string","rchain_v1::rchain","Will take an array of bytes and transform it into a string…",null,[[["vec",3]],["string",3]]],[8,"WorldState","","Represents the current state of the blockchain after all…",null,null],[10,"get_user_ids","","Will bring us all registered user ids",10,[[],[["string",3],["vec",3]]]],[10,"get_account_by_id_mut","","Will return an account given it id if is available (mutable)",10,[[["string",3]],[["option",4],["account",3]]]],[10,"get_account_by_id","","Will return an account given it id if is available",10,[[["string",3]],[["option",4],["account",3]]]],[10,"create_account","","Will add a new account",10,[[["string",3],["accounttype",4]],["result",4]]],[11,"new","","Constructor",0,[[]]],[11,"append_block","","Will add a block to the Blockchain @TODO every simple step…",0,[[["block",3]],[["string",3],["result",4]]]],[11,"len","","Will return the amount of blocks currently stored",0,[[]]],[11,"get_last_block_hash","","Will return the hash of the last block",0,[[],[["option",4],["string",3]]]],[11,"check_validity","","Checks if the blockchain was tempered with It will check…",0,[[],[["string",3],["result",4]]]],[11,"new","","",1,[[["option",4],["string",3]]]],[11,"set_nonce","","Changes the nonce number and updates the hash",1,[[]]],[11,"calculate_hash","","Will calculate the hash of the whole block including…",1,[[],["vec",3]]],[11,"add_transaction","","Appends a transaction to the queue",1,[[["transaction",3]]]],[11,"get_transaction_count","","Will return the amount of transactions",1,[[]]],[11,"update_hash","","Will update the hash field by including all transactions…",1,[[]]],[11,"verify_own_hash","","Checks if the hash is set and matches the blocks interna",1,[[]]],[11,"new","","",2,[[["string",3],["transactiondata",4]]]],[11,"execute","","Will change the world state according to the transactions…",2,[[],["result",4]]],[11,"calculate_hash","","Will calculate the hash using Blake2 hasher",2,[[],["vec",3]]],[11,"check_signature","","Will hash the transaction and check if the signature is…",2,[[]]],[11,"is_signed","","",2,[[]]],[11,"new","","Constructor",3,[[["accounttype",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"get_user_ids","","",0,[[],[["string",3],["vec",3]]]],[11,"get_account_by_id_mut","","",0,[[["string",3]],[["option",4],["account",3]]]],[11,"get_account_by_id","","",0,[[["string",3]],[["option",4],["account",3]]]],[11,"create_account","","",0,[[["string",3],["accounttype",4]],["result",4]]],[11,"clone","","",0,[[],["blockchain",3]]],[11,"clone","","",1,[[],["block",3]]],[11,"clone","","",2,[[],["transaction",3]]],[11,"clone","","",4,[[],["transactiondata",4]]],[11,"clone","","",3,[[],["account",3]]],[11,"clone","","",8,[[],["accounttype",4]]],[11,"eq","","",4,[[["transactiondata",4]]]],[11,"ne","","",4,[[["transactiondata",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]]],"p":[[3,"Blockchain"],[3,"Block"],[3,"Transaction"],[3,"Account"],[4,"TransactionData"],[13,"ChangeStoreValue"],[13,"TransferTokens"],[13,"CreateTokens"],[4,"AccountType"],[13,"Validator"],[8,"WorldState"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);